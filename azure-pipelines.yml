# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
- build_and_deploy

variables:
  azureServiceConnectionId: 'newServiceConnection'
  webAppName: 'newwebappflask'
  projectRoot: $(System.DefaultWorkingDirectory)


pool: myAgentPool

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool: myAgentPool
    steps: 
    - script: |
        sudo apt update
        sudo apt install -y python3-venv python3-full

        # Create and activate a virtual environment
        python3 -m venv myenv
        source myenv/bin/activate
        python3.9 -m pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: 'Step - Install requirements.txt'
    
    - task: ArchiveFiles@2
      displayName: 'Step - Archive files'
      inputs: 
          rootFolderOrFile: '$(projectRoot)'
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$Build.BuildId).zip
          replaceExistingArchive: true 
      
    - upload: $(Build.ArtifactStagingDirectory)/$Build.BuildId).zip
      displayName: 'Step - Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs: 
  - deployment: DeploymentJob
    pool: myAgentPool
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              appType: webApp